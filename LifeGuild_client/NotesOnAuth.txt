
  // ACCESS RESOURCE WITH EXPIRED TOKEN
  // 1. REQUEST with JWT in HttpOnly Cookie
  // 2. receive 401 and Token Expired Message
  // 3. Send refresh token request POST api/auth/refreshtoken + Body refreshToken in HttpOnly Cookie
  // 4. receive new JWT accessToken, refreshToken in HttpOnly Cookie
  // 5. request data with new JWT in HttpOnly Cookie

  // USER LOGIN
  // 1. POST /api/auth/signin + { username, password }
  // 2. receive {user info, authorities} + JWT accessToken, refreshToken in HttpOnlyCookie
  // signInWithEmail(user: User) {

  // }
  // ACCESS RESOURCE WITH EXPIRED TOKEN
  // 1. REQUEST with JWT in HttpOnly Cookie
  // 2. receive 401 and Token Expired Message
  // 3. Send refresh token request POST api/auth/refreshtoken + Body refreshToken in HttpOnly Cookie
  // 4. receive new JWT accessToken, refreshToken in HttpOnly Cookie
  // 5. request data with new JWT in HttpOnly Cookie

// USER LOGIN OAUTH version TODO =======================================
  // refreshToken() {
  //   return this.httpClient.post(AUTH_API + 'refreshtoken', {}, httpOptions);
  // }
  // 1. POST /api/auth/signin + { username, password }
  // 2. receive {user info, authorities} + JWT accessToken, refreshToken in HttpOnlyCookie
  // login(email: string, password: string) {
  //   const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8')
  //   return this.httpClient.post<User>('/api/login', { email, password })
  //     // this is just the HTTP call,
  //     // we still need to handle the reception of the token
  //     .shareReplay();

  //   //sharereplay prevents the receiver of this Observable from accidentally triggering multiple POST requests
  // }

// calcContentLength(content: string) {
  //   const encoder = new TextEncoder();
  //   const encodedstr = (encoder.encode(content)).length
  //   console.log(encodedstr)
  //   return encodedstr.toString();
  // }
